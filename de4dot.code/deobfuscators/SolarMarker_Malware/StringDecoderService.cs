using System;
using System.Reflection;
using AssemblyData;
using System.Reflection.Emit;

namespace de4dot.code.deobfuscators.SolarMaker_Malware {
	class StringDecoderService : IUserGenericService {
		Assembly loadedAssembly;
        delegate string MyDecryptString();
		public const int MSG_CALL_METHOD = 0;

		[CreateUserGenericService]
		public static IUserGenericService Create() => new StringDecoderService();
		public void AssemblyLoaded(Assembly assembly) {
			loadedAssembly = assembly;
		}

		public object HandleMessage(int msg, object[] args) {
			switch(msg) {
				case MSG_CALL_METHOD:
					String moduleName = (String)args[0];
					int mdToken = (int)args[1];

					Module targetModule = loadedAssembly.GetModule(moduleName);

					MethodInfo targetMethodInfo = null;
					if(targetModule.ResolveMethod(mdToken) is MethodInfo method) {
						targetMethodInfo = method;
					}
					else {
						return false;
					}

					var dm = new DynamicMethod("DM", targetMethodInfo.ReturnType, null, true);
					var il = dm.GetILGenerator();
					il.Emit(OpCodes.Call, targetMethodInfo);
					il.Emit(OpCodes.Ret);
					MyDecryptString func = (MyDecryptString)dm.CreateDelegate(typeof(MyDecryptString));
					String output = func();
					return output;
				default:
					throw new ApplicationException($"Invalid msg: {msg:X8}");
			}
		}
        public void Dispose() { }
    }
}
